% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kmeansCC.R
\name{kmeansCC}
\alias{kmeansCC}
\title{K-means Consensus Clustering}
\usage{
kmeansCC(data, k, reps, ncores, seed = 0)
}
\arguments{
\item{data}{A numeric matrix where rows are features and columns are samples.
Row names are required for feature identification.}

\item{k}{Integer. The number of clusters to identify.}

\item{reps}{Integer. The number of bootstrap resampling iterations to perform.}

\item{ncores}{Integer. The number of CPU cores to use for parallel processing.}

\item{seed}{Integer. Random seed for reproducibility. Default is 0.}
}
\value{
An integer vector of cluster assignments for each feature, named with
  the feature names from the input data.
}
\description{
Performs k-means consensus clustering using bootstrap resampling to generate
stable cluster assignments. This function runs multiple k-means clustering
iterations on bootstrapped samples of the data, builds a consensus matrix
based on co-clustering frequencies, and performs hierarchical clustering
on the consensus matrix.
}
\details{
The function performs the following steps:
\enumerate{
  \item Generates all unique feature pairs (including self-pairs)
  \item For each bootstrap iteration:
    \itemize{
      \item Samples columns (samples) with replacement
      \item Runs k-means clustering
      \item Records which feature pairs cluster together
    }
  \item Aggregates co-clustering frequencies across all iterations
  \item Builds a symmetric consensus matrix
  \item Performs hierarchical clustering (complete linkage) on 1 - consensus
  \item Cuts the dendrogram to obtain k final clusters
}

The function uses parallel processing for both the bootstrap iterations and
the aggregation of results. Random number generation uses L'Ecuyer-CMRG
for reproducibility in parallel contexts.
}
\examples{
\dontrun{
# Create example data matrix
set.seed(123)
data <- matrix(rnorm(1000), nrow = 100, ncol = 10)
rownames(data) <- paste0("Feature_", 1:100)

# Run consensus clustering
clusters <- kmeansCC(
  data = data,
  k = 4,
  reps = 100,
  ncores = 2,
  seed = 0
)

# View cluster assignments
table(clusters)
}
}
